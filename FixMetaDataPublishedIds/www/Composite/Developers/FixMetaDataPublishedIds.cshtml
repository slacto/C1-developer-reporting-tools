@using System.Activities.Tracking
@using System.Transactions
@using Composite.Core.Types
@using Composite.Data

@functions
{
    private static List<string> _messages;
    private static List<IData> _toDelete;
    private static List<IData> _toUpdate;

    private void FixData(Type dataType)
    {
        var singleStep = Request.QueryString["singleStep"] == "true";

        List<IPageMetaData> unpublishedRows;

        using (new DataScope(PublicationScope.Unpublished))
        {
            unpublishedRows = DataFacade.GetData(dataType).Cast<IPageMetaData>().ToList();
        }

        var unpublishedIds = new HashSet<Guid>(unpublishedRows.Select(d => d.Id));

        using (new DataScope(PublicationScope.Published))
        {
            var publishedRows = DataFacade.GetData(dataType).Cast<IPageMetaData>().ToList();

            _toUpdate = new List<IData>();
            _toDelete = new List<IData>();

            // loop through row that has no match in unpublished rows
            foreach (var publishedRow in publishedRows.Where(row => !unpublishedIds.Contains(row.Id)))
            {
                // if this is a duplicate row just delete it (the other duplicate is probably good)
                if (publishedRows.Any(r => r.PageId == publishedRow.PageId && r.Id != publishedRow.Id))
                {
                    DeleteRow(dataType, singleStep, publishedRow);
                    continue;
                }

                // this is a row that needs a new id - try to find it by matching page id in unpublished rows
                var unpublishedRow = unpublishedRows.FirstOrDefault(r => r.PageId == publishedRow.PageId);

                // if no match was fount just delete it
                if (unpublishedRow == null)
                {
                    DeleteRow(dataType, singleStep, publishedRow);
                    continue;
                }

                if (singleStep)
                {
                    try
                    {
                        DeleteRow(dataType, true, publishedRow);

                        publishedRow.Id = unpublishedRow.Id;

                        var newPublishedRow = DataFacade.BuildNew(dataType);

                        var logMessage = "<ul>";

                        foreach (var prop in dataType.GetPropertiesRecursively().Where(p => p.CanRead && p.CanWrite))
                        {
                            var oldValue = prop.GetValue(publishedRow);

                            prop.SetValue(newPublishedRow, oldValue);

                            logMessage += String.Format("<li>{0} = {1}</li>", prop, oldValue);
                        }

                        logMessage += "</ul>";

                        try
                        {
                            DataFacade.AddNew(newPublishedRow);
                            _messages.Add(String.Format("Added: Id {0} of type {1}", publishedRow.Id, dataType.FullName));
                        }
                        catch (Exception ex)
                        {
                            _messages.Add(String.Format("<b>Error</b> adding: Id {0} of type <b>{1}</b><br/>Trying to add: {2}{3}", publishedRow.Id, dataType.FullName, logMessage, ex));
                        }
                    }
                    catch (Exception ex)
                    {
                        _messages.Add(String.Format("<b>Error</b> deleting: Id {0} of type <b>{1}</b><br/>{2}", publishedRow.Id, dataType.FullName, ex));
                    }
                }
                else
                {
                    publishedRow.Id = unpublishedRow.Id;

                    _toUpdate.Add(publishedRow);
                }
            }

            if (singleStep) return;

            if (_toUpdate.Any())
            {
                try
                {
                    _messages.Add(String.Format("Updating: {0} record(s) of type <b>{1}</b>", _toUpdate.Count, dataType.FullName));
                    DataFacade.Update(_toUpdate);
                }
                catch (Exception ex)
                {
                    _messages.Add(ex.ToString());
                }
            }

            if (_toDelete.Any())
            {
                try
                {
                    _messages.Add(String.Format("Deleting: {0} record(s) of type <b>{1}</b>", _toDelete.Count, dataType.FullName));
                    DataFacade.Delete<IData>(_toDelete);
                }
                catch (Exception ex)
                {
                    _messages.Add(ex.ToString());
                }
            }
        }
    }

    private static void DeleteRow(Type dataType, bool singleStep, IPageData publishedRow)
    {
        if (singleStep)
        {
            try
            {
                DataFacade.Delete<IData>(publishedRow);
                _messages.Add(String.Format("Deleted: Id {0} of type {1}", publishedRow.Id, dataType.FullName));
            }
            catch (Exception ex)
            {
                _messages.Add(String.Format("<b>Error</b> deleting: Id {0} of type <b>{1}</b><br/>{2}", publishedRow.Id, dataType.FullName, ex));
            }
        }
        else
        {
            _toDelete.Add(publishedRow);
        }
    }
}

@{
    _messages = new List<string>();

    var iPageMetaDataType = typeof(IPageMetaData);
    var types = AppDomain.CurrentDomain.GetAssemblies().GetTypes()
        .Where(t => t.IsInterface
            && iPageMetaDataType.IsAssignableFrom(t)
            && t.GetCustomAttributes(typeof(ImmutableTypeIdAttribute), false).Any());

    foreach (var t in types)
    {
        FixData(t);
    }
}

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Validate media archive</title>
    <link rel="stylesheet" href="/Frontend/css/all.min.css" />
    <style>
        body {
            margin: 1em;
        }

        th {
            text-align: left;
        }

        .True {
            background-color: #f99;
        }
    </style>
</head>
<body style="background-color: inherit; text-align: left;">
    <h1>Fix MetaData published Ids</h1>
    <p><a href="?singleStep=true">Single step (update and delete)</a>. Use this option to debug and on sites using SQL Server (does <em>Add and Delete</em> instead of <em>Update</em>)</p>
    @if (_messages.Any())
    {
        <ol>
            @foreach (var message in _messages)
            {
                <li>@Html.Raw(message)</li>
            }
        </ol>
    }
    else
    {
        <p>No changes were made.</p>
    }
</body>
</html>