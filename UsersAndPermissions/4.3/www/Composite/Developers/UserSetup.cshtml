@inherits Composite.AspNet.Razor.RazorFunction

@using Composite.C1Console.Security
@using Composite.C1Console.Trees
@using Composite.Core.Routing
@using Composite.Data
@using Composite.Data.Types
@using Composite.Plugins.Elements.ElementProviders.BaseFunctionProviderElementProvider
@using Composite.Plugins.Elements.ElementProviders.VirtualElementProvider

@using CompositeC1Contrib.FormBuilder.C1Console.EntityTokens

@functions
{
    private static string[] DeserializeEntityToken(string serializedEntityToken, IUserPermissionDefinition permissionDefinition)
    {
        var permissionNames = new List<string>();
        using (var c = new DataConnection())
        {
            permissionNames.AddRange(c.Get<IUserPermissionDefinitionPermissionType>()
                .Where(pt => pt.UserPermissionDefinitionId == permissionDefinition.Id)
                .Select(pt => pt.PermissionTypeName));
        }

        var permissionList = String.Join(", ", permissionNames.OrderBy(t => t));

        var permissionText = String.Format("<br/><span class=\"smaller\">Permissions: {0}</span>", permissionList);

        var entityToken = EntityTokenSerializer.Deserialize(serializedEntityToken);

        var dataEntityToken = entityToken as DataEntityToken;
        if (dataEntityToken != null)
        {
            if (dataEntityToken.Data == null)
            {
                return new[] { "00: <span class=\"error\">Error</span>", String.Format("Data entity token {0} has no data", dataEntityToken.Id) };
            }

            if (dataEntityToken.InterfaceType == typeof(IMediaFileFolder))
            {
                var mediaFolder = (IMediaFileFolder)dataEntityToken.Data;

                return new[] { "03: Media folders", mediaFolder.Path + permissionText };
            }

            if (dataEntityToken.InterfaceType == typeof(IPage))
            {
                var page = (IPage)dataEntityToken.Data;

                return new[] { "02: Pages", PageUrls.BuildUrl(page).Replace("/c1mode(unpublished)", "") + permissionText };
            }

            return new[] { "00: <span class=\"highlight\">Unhanded data entity token<span>", dataEntityToken.InterfaceType + "<br/>" + entityToken };
        }

        var virtualElementProviderEntityToken = entityToken as VirtualElementProviderEntityToken;
        if (virtualElementProviderEntityToken != null)
        {
            if (virtualElementProviderEntityToken.Id == "ID01")
            {
                return new[] { "01: Global permissions", permissionList };
            }

            return new[] { "00: <span class=\"highlight\">Unhanded virtual element provider entity token</span>", entityToken.ToString() };
        }

        var treeSimpleElementEntityToken = entityToken as TreeSimpleElementEntityToken;
        if (treeSimpleElementEntityToken != null)
        {
            //TODO Specify tree name like 'Content -> Website Items'. Show tree Label instead of Id
            return new[] { "15: Tree", treeSimpleElementEntityToken.Id + permissionText };
        }

        var baseFunctionFolderElementEntityToken = entityToken as BaseFunctionFolderElementEntityToken;
        if (baseFunctionFolderElementEntityToken != null)
        {
            return new[] { "20: Function namespaces", baseFunctionFolderElementEntityToken.FunctionNamespace + permissionText };
        }

        var formBuilderFolderEntityToken = entityToken as NamespaceFolderEntityToken;
        if (formBuilderFolderEntityToken != null)
        {
            return new[] { "10: Formbuilder folder", formBuilderFolderEntityToken.Namespace + permissionText };
        }

        var formBuilderInstanceEntityToken = entityToken as FormInstanceEntityToken;
        if (formBuilderInstanceEntityToken != null)
        {
            return new[] { "10: Formbuilder form", formBuilderInstanceEntityToken.FormName + permissionText };
        }

        return new[] { "00: <span class=\"highlight\">Unhanded entity token</span>", entityToken.GetType() + "<br/>" + entityToken };
    }
    
    public class UserInfo
    {
        public IUser User { get; set; }
        public List<IUserGroup> Groups { get; set; }
        public List<TokenType> Permissions { get; set; }

        public UserInfo(IUser user, List<IUserGroup> groups, List<TokenType> permissions)
        {
            User = user;
            Groups = groups;
            Permissions = permissions;
        }
    }

    public class TokenType
    {
        public string Name { get; set; }
        public List<string> Item { get; set; }

        public TokenType(string name, List<string> items)
        {
            Name = name;
            Item = items;
        }
    }
}

@{
    var usersInfo = new List<UserInfo>();

    foreach (var u in Data.Get<IUser>().OrderBy(o => o.Username))
    {
        var user = u;

        var groups = Data.Get<IUserUserGroupRelation>()
            .Where(f => f.UserId == user.Id)
            .Join(Data.Get<IUserGroup>(), relation => relation.UserGroupId, group => group.Id, (relation, group) => group)
            .ToList();

        var permissions = Data.Get<IUserPermissionDefinition>()
            .Where(f => f.Username == user.Username)
            .Select(f => DeserializeEntityToken(f.SerializedEntityToken, f))
            .GroupBy(f => f[0])
            .OrderBy(f => f.Key)
            .Select(f => new TokenType(f.Key.Substring(3), f.Select(t => t[1]).OrderBy(t => t).ToList()))
            .ToList();

        usersInfo.Add(new UserInfo(u, groups, permissions));
    }
}

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>User setup</title>
    <link rel="stylesheet" href="style.css" />
</head>
<body>
    <h1>User setup</h1>
    <table class="style-01" style="float: right; width: 16%;">
        <tr>
            <th>Go to</th>
        </tr>
        <tr>
            <td>
                <ul>
                    @foreach (var instance in usersInfo)
                    {
                        <li><a href="#id-@instance.User.Username">@instance.User.Username</a></li>
                    }
                </ul>
            </td>
        </tr>
    </table>
    <table class="style-01" style="float: right; width: 19%;">
        <tr>
            <th>Go to (ordered by folder)</th>
        </tr>
        <tr>
            <td>
                @foreach (var group in usersInfo.Select(f => f.User.Group).Distinct().OrderBy(o => o))
                {
                    var folder = group;
                    <div>@folder</div>
                    <ul>
                        @foreach (var instance in usersInfo.Where(f => f.User.Group == folder))
                        {
                            <li><a href="#id-@instance.User.Username ">@instance.User.Username </a></li>
                        }
                    </ul>
                }
            </td>
        </tr>
    </table>
    <table class="style-01" style="float: left; width: 65%;">
        <tr>
            <th>Username</th>
            <th>User groups</th>
            <th>Special permissions</th>
            <th class="ghosted-cell"></th>
        </tr>
        @foreach (var userInfo in usersInfo)
        {
            var user = userInfo.User;
            <tr>
                <td id="id-@user.Username"><a href="UserSettings.cshtml#id-@user.Username " title="Show user settings">@user.Username</a> : @user.Group</td>
                <td>
                    <ul>
                        @foreach (var group in userInfo.Groups)
                        {
                            <li><a href="UserGroupSetup.cshtml#id-@group.Id " title="Show user group setup">@group.Name </a></li>
                        }
                    </ul>
                </td>
                <td>
                    @foreach (var permission in userInfo.Permissions)
                    {
                        <div>@permission.Name </div>
                        <ul>
                            @foreach (var item in permission.Item)
                            {

                                <li>@item </li>
                            }
                        </ul>
                    }
                </td>
                <td class="ghosted-cell"><a href="#">&#65514;</a></td>
            </tr>
        }
    </table>
</body>
</html>
